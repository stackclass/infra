# Default values for stackclass.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

fullnameOverride: ""
nameOverride: ""

global:
  ingressClass: ""

# Frontend configurations
frontend:
  enabled: true
  replicaCount: 1
  image:
    repository: ghcr.io/stackclass/frontend
    tag: latest
    pullPolicy: Always
  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000
  ingress:
    enabled: true
    annotations: {}
    host: stackclass.local
    tls:
      enabled: false
      # Leave blank to use the default generated name
      secretName: ""
  resources: {}
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
  secrets:
    analyticsId: ""
    githubClientId: "<REPLACE_WITH_GITHUB_CLIENT_ID>"
    githubClientSecret: "<REPLACE_WITH_GITHUB_CLIENT_SECRET>"

# Backend configurations
backend:
  enabled: true
  replicaCount: 1
  image:
    repository: ghcr.io/stackclass/stackclass-server
    tag: latest
    pullPolicy: Always
  service:
    type: ClusterIP
    port: 8080
    targetPort: 8080
  ingress:
    enabled: true
    annotations: {}
    host: api.stackclass.local
    tls:
      enabled: false
      # Leave blank to use the default generated name
      secretName: ""
  resources: {}
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 70
  persistence:
    size: 10Gi
    storageClass: ""
  secrets:
    gitServerEndpoint: "git.stackclass.local"
    gitServerUsername: "<REPLACE_WITH_GIT_SERVER_USERNAME>"
    gitServerPassword: "<REPLACE_WITH_GIT_SERVER_PASSWORD>"
    gitCommitterName: "StackClass"
    gitCommitterEmail: "hello@stackclass.dev"
    dockerRegistryEndpoint: "docker.stackclass.local"

# PostgreSQL configurations
postgresql:
  enabled: true
  auth:
    username: stackclass
    database: stackclass
    password: stackclass
  primary:
    persistence:
      size: 10Gi
      storageClass: ""
  resources: {}

# Certificate issuer configurations for Let's Encrypt
# Used to automatically generate TLS certificates for ingress resources
# Requires cert-manager to be installed in the cluster
issuer:
  enabled: false
  email: "your-email@example.com"
  environment: "staging" # or "prod"

# Additional configurations
nodeSelector: {}
tolerations: []
affinity: {}
